{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/utility/amount-transformer.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/action/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/action/is-action-options.ts","webpack://checkoutKit/./src/common/action/cache-action.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/external \"rxjs/internal/operators\"","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/common/storage/browser-storage.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"rxjs/index\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirmJs.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/overlay/overlay.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cybersource.ts","webpack://checkoutKit/./src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cybersource-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cybersource-threedsecure-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cybersource-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cybersource-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-declined-error.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-script-loader.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","__webpack_exports__","CustomerStrategyActionType","PaymentStrategyActionType","MissingDataErrorType","MissingDataError","_super","subtype","_this","this","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","tslib__WEBPACK_IMPORTED_MODULE_0__","_standard_error__WEBPACK_IMPORTED_MODULE_1__","ShippingStrategyActionType","CheckoutActionType","standard_error_StandardError","StandardError","message","_newTarget","setPrototypeOf","__proto__","Error","captureStackTrace","stack","external_tslib_","CouponActionType","BillingAddressActionType","OrderActionType","PaymentMethodActionType","CheckoutButtonActionType","GiftCertificateActionType","InstrumentActionType","EmbeddedCheckoutEventType","RemoteCheckoutActionType","DEFAULT_RESPONSE","body","headers","status","RequestError","response","_a","_b","errors","_c","ConfigActionType","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","ContentType","PaymentActionType","InvalidArgumentError","HOSTED","OFFLINE","isIframeEvent","isEqual","objectA","objectB","options","Array","isArray","length","index","length_1","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","length_2","isObjectEqual","PaymentMethodInvalidError","_common_url__WEBPACK_IMPORTED_MODULE_0__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","origin","post","event","window","postMessage","setTarget","CustomerActionType","ErrorActionType","PaymentMethodActionCreator","_requestSender","loadPaymentMethods","rxjs__WEBPACK_IMPORTED_MODULE_2__","observer","next","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","then","meta","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","complete","catch","error","LoadPaymentMethodsFailed","loadPaymentMethod","methodId","LoadPaymentMethodRequested","undefined","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_action__WEBPACK_IMPORTED_MODULE_3__","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodRequestSender","timeout","Accept","JsonV1","X-API-INTERNAL","url","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_common_url__WEBPACK_IMPORTED_MODULE_1__","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","push","removeListener","indexOf","splice","trigger","forEach","_is_iframe_event__WEBPACK_IMPORTED_MODULE_3__","data","_common_utility__WEBPACK_IMPORTED_MODULE_2__","mapToInternalLineItems","itemMap","decimalPlaces","idKey","reduce","result","concat","map","item","amountTransformer","amount_transformer","id","imageUrl","amount","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapGiftCertificateToInternalLineItem","map_to_internal_line_item","mapToInternalLineItemType","INTERNAL_USE_ONLY","_is_equal__WEBPACK_IMPORTED_MODULE_0__","CacheKeyResolver","_lastId","_maps","getKey","args","_i","arguments","_resolveMap","apply","parentMaps","cacheKey","usedCount","_generateKey","slice","getUsedCount","isMatched","parentMaps_1","maps","bindDecorator","target","descriptor","bindMethodDecorator","decoratedTarget","class_1","getOwnPropertyNames","getOwnPropertyDescriptor","bindClassDecorator","method","boundMethod","set","CheckoutIncludes","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","PaymentNotInitialized","_client","authorization","getPaypal","_paypal","Promise","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cached","kount","code","deviceData","teardown","resolve","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","default","mod","mapToInternalLineItem","_common_utility__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","brand","categoryNames","productId","option","addedByPromotion","isPrivate","throwErrorAction","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","action","payload","NotInitializedErrorType","NotInitializedError","CustomerNotInitialized","ShippingNotInitialized","AmountTransformer","_decimalPlaces","Math","round","pow","parseUrl","_error_errors__WEBPACK_IMPORTED_MODULE_0__","test","anchor","document","createElement","href","hash","hostname","pathname","port","protocol","search","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","param","lastArg","useCache","fn","resolver","instanceMethods","cache_key_resolver","external_lodash_","external_rxjs_","pipe","operators_","store","omitDeep","lodash__WEBPACK_IMPORTED_MODULE_0__","predicate","CheckoutActionCreator","_checkoutRequestSender","_configActionCreator","loadCheckout","_checkout_actions__WEBPACK_IMPORTED_MODULE_7__","LoadCheckoutRequested","loadConfig","LoadCheckoutSucceeded","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_common_error__WEBPACK_IMPORTED_MODULE_4__","LoadCheckoutFailed","loadDefaultCheckout","context","getState","config","getContextConfig","checkoutId","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","updateCheckout","checkout","getCheckout","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","loadCurrentCheckout","ConsignmentActionCreator","_consignmentRequestSender","unassignItemsByAddress","consignment","state","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","existingConsignment","consignments","getConsignmentByAddress","shippingAddress","lineItems","_removeLineItems","cart","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","params","include","_checkout_checkout_params__WEBPACK_IMPORTED_MODULE_3__","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","updateAddress","address","_getConsignmentRequestBody","createConsignments","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","physicalItems","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","lineItem","request","DEFAULT_PARAMS","join","ConsignmentRequestSender","put","delete","getCallbackUrl","location","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","request_error","joinErrors","map_from_payment_error_response_joinErrors","RequestErrorFactory","_factoryMethods","register","detail","title","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","timeout_error","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","error_actions","ClearError","isClearErrorAction","omit_deep","DEFAULT_STATE","statuses","billingAddressReducer","data_store_","dataReducer","errorsReducer","statusesReducer","reducer","billing_address_actions","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","billingAddress","loadError","UpdateBillingAddressRequested","updateError","UpdateBillingAddressFailed","ContinueAsGuestRequested","continueAsGuestError","ContinueAsGuestFailed","isLoading","isUpdating","isContinuingAsGuest","cart_reducer_DEFAULT_STATE","cartReducer","cart_reducer_dataReducer","cart_reducer_errorsReducer","cart_reducer_statusesReducer","consignment_actions","coupon_actions","ApplyCouponSucceeded","RemoveCouponSucceeded","gift_certificate_actions","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","checkout_button_reducer_DEFAULT_STATE","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","checkout_button_reducer_dataReducer","checkout_button_reducer_errorsReducer","checkout_button_reducer_statusesReducer","checkout_button_actions","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","initializeError","InitializeButtonFailed","DeinitializeButtonRequested","deinitializeError","DeinitializeButtonFailed","isInitializing","isDeinitializing","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","coupon_reducer_DEFAULT_STATE","couponReducer","coupon_reducer_dataReducer","coupon_reducer_errorsReducer","coupon_reducer_statusesReducer","coupons","ApplyCouponRequested","applyCouponError","ApplyCouponFailed","RemoveCouponRequested","removeCouponError","RemoveCouponFailed","isApplyingCoupon","isRemovingCoupon","gift_certificate_reducer_DEFAULT_STATE","giftCertificateReducer","gift_certificate_reducer_dataReducer","gift_certificate_reducer_errorsReducer","gift_certificate_reducer_statusesReducer","giftCertificates","ApplyGiftCertificateRequested","applyGiftCertificateError","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","removeGiftCertificateError","RemoveGiftCertificateFailed","isApplyingGiftCertificate","isRemovingGiftCertificate","customer_reducer_DEFAULT_STATE","customerReducer","customer_reducer_dataReducer","customer","customer_strategy_state_DEFAULT_STATE","customerStrategyReducer","customer_strategy_reducer_dataReducer","customer_strategy_reducer_errorsReducer","customer_strategy_reducer_statusesReducer","customer_strategy_actions","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isSigningIn","isSigningOut","isWidgetInteracting","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","country_actions","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","order_reducer_DEFAULT_STATE","orderReducer","order_reducer_dataReducer","order_reducer_errorsReducer","metaReducer","order_reducer_statusesReducer","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","payment_reducer_dataReducer","payment_actions","SubmitPaymentSucceeded","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","payment_method_reducer_metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","array","gateway","newArray","loadMethodId","loadMethodError","isLoadingMethod","payment_strategy_state_DEFAULT_STATE","paymentStrategyReducer","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","payment_strategy_actions","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","instrument_actions","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","instrument","bigpayToken","instrumentId","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","isDeleting","deletingInstrument","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","settings","UpdateRemoteCheckout","consignment_reducer_DEFAULT_STATE","updateShippingOptionError","isUpdatingShippingOption","consignmentReducer","consignment_reducer_dataReducer","consignment_reducer_errorsReducer","consignment_reducer_statusesReducer","customer_actions","SignOutCustomerSucceeded","isLoadingShippingOptions","isCreating","shipping_country_reducer_DEFAULT_STATE","shippingCountryReducer","shipping_country_reducer_dataReducer","shipping_country_reducer_errorsReducer","shipping_country_reducer_statusesReducer","shipping_country_actions","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shipping_strategy_state_DEFAULT_STATE","shippingStrategyReducer","shipping_strategy_reducer_dataReducer","shipping_strategy_reducer_errorsReducer","shipping_strategy_reducer_statusesReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","checkout_reducer_DEFAULT_STATE","checkoutReducer","checkout_reducer_dataReducer","checkout_reducer_errorsReducer","checkout_reducer_statusesReducer","orderId","billing_address_selector","BillingAddressSelector","_billingAddress","getBillingAddress","getUpdateError","getContinueAsGuestError","getLoadError","selector_decorator","cart_selector","CartSelector","_cart","checkout_button_selector","CheckoutButtonSelector","_checkoutButton","getInitializeError","getDeinitializeError","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","config_selector","ConfigSelector","_config","getConfig","getStoreConfig","storeConfig","getExternalSource","externalSource","coupon_selector","CouponSelector","_coupon","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","gift_certificate_selector","GiftCertificateSelector","_giftCertificate","getGiftCertificates","customer_selector","CustomerSelector","_customer","getCustomer","CustomerStrategySelector","_customerStrategies","getSignInError","getSignOutError","getWidgetInteractionError","form_selector","FormSelector","getShippingAddressFields","countries","countryCode","selectedCountry","formFields","shippingAddressFields","field","_processField","getBillingAddressFields","billingAddressFields","_processCountry","_processProvince","_processsPostCode","country","items","label","fieldType","itemtype","subdivisions","required","hasPostalCodes","Boolean","country_selector","CountrySelector","_countries","getCountries","order_selector","OrderSelector","_order","_coupons","getOrder","getOrderMeta","payment_selector","PaymentSelector","_checkout","getPaymentId","internalPayment","_getInternalPayment","providerId","gatewayId","_getHostedPayment","_getGatewayPayment","getPaymentStatus","replace","step","getPaymentToken","getPaymentRedirectUrl","redirectUrl","isPaymentDataRequired","useStoreCredit","grandTotal","getGrandTotal","isPaymentDataSubmitted","paymentMethod","nonce","payment_status_types","payments","providerType","payment_method_types","payment_method_selector","PaymentMethodSelector","_paymentMethods","getPaymentMethods","getPaymentMethodsMeta","getPaymentMethod","getLoadMethodError","payment_strategy_selector","PaymentStrategySelector","_paymentStrategies","getExecuteError","getFinalizeError","getWidgetInteractingError","InstrumentSelector","_instruments","getInstruments","getInstrumentsMeta","getDeleteError","remote_checkout_selector","RemoteCheckoutSelector","_remoteCheckout","shipping_address_selector","ShippingAddressSelector","_consignments","getShippingAddress","shipping_country_selector","ShippingCountrySelector","_shippingCountries","getShippingCountries","shipping_strategy_selector","ShippingStrategySelector","_shippingStrategies","getUpdateAddressError","getSelectOptionError","normalize","firstName","lastName","company","address1","address2","city","stateOrProvince","postalCode","phone","customFields","consignment_selector","ConsignmentSelector","getConsignmentById","addressA","addressB","getShippingOption","selectedShippingOption","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","getUpdateShippingOptionError","isAssigningItems","checkout_selector","CheckoutSelector","_giftCertificates","storeCredit","max","createInternalCheckoutSelectors","checkoutButton","customerStrategies","customer_strategy_selector","form","instruments","instrument_selector","paymentMethods","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","selectors","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","request_error_factory","unrecoverable_error","payment_method_invalid_error","action$","every","stateTransformer","CheckoutNotAvailableError","checkout_request_sender_CheckoutRequestSender","CheckoutRequestSender","content_type","join_includes","checkout_default_includes","checkout_not_available_error","mapToInternalCoupon","couponTypes","coupon","displayName","discountType","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","checkout_button_error_selector","CheckoutButtonErrorSelector","getInitializeButtonError","getDeinitializeButtonError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","createCheckoutButtonSelectors","CheckoutButtonMethodType","CheckoutButtonInitializer","_store","_buttonStrategyActionCreator","_state","subscribe","subscriber","filters","initializeButton","containerIds","selector","idPrefix","containers","querySelectorAll","invalid_argument_error","container","setUniqueElementId","queueId","dispatch","deinitializeButton","deinitialize","CheckoutButtonStrategyActionCreator","_registry","_paymentMethodActionCreator","throw_error_action","checkout_button_method_type","BraintreePaypalButtonStrategy","_checkoutActionCreator","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","_paymentMethod","missing_data_error","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","testMode","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","addresses","not_initialized_error","CheckoutButtonNotInitialized","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","currency","offerCredit","tokenizePayment","postForm","payment_type","provider","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","googlepay_button_strategy","GooglePayButtonStrategy","_googlePayPaymentProcessor","_methodId","_getMethodId","_walletButton","_createSignInButton","parentNode","removeChild","getElementById","googlePayButton","createButton","_handleWalletButtonClick","appendChild","preventDefault","displayWallet","paymentData","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_onError","Content-Type","bind_decorator","masterpass_button_strategy","MasterpassButtonStrategy","_masterpassScriptLoader","initializationData","load","masterpass","_masterpassClient","_signInButton","buttonContainer","button","src","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","get_callback_url","PaypalButtonStrategy","_host","merchantId","clientId","actions","internal_api_headers","res","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","host","create_checkout_store","requestSender","request_sender_","formPoster","form_poster_","checkout_button_initializer","checkout_button_strategy_action_creator","registry","registry_registry","scriptLoader","script_loader_","checkoutActionCreator","checkout_action_creator","checkout_request_sender","config_action_creator","config_request_sender","BRAINTREE_PAYPAL","braintree_paypal_button_strategy","braintree_sdk_creator","braintree_script_loader","paypal_script_loader","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","masterpass_script_loader","GOOGLEPAY_BRAINTREE","create_googlepay_payment_processor","googlepay_braintree_initializer","GOOGLEPAY_STRIPE","googlepay_stripe_initializer","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","payment_method_action_creator","payment_method_request_sender","NotEmbeddableErrorType","BrowserStorage","_namespace","getItem","rawValue","external_local_storage_fallback_default","a","withNamespace","parse","removeItem","getItemOnce","setItem","InvalidLoginTokenError","NotEmbeddableError","UnknownError","standard_error","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_options","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","onLoad","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","iframe","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","parse_url","reject","invalid_login_token_error","encodeURIComponent","visibility","not_embeddable_error","MissingContent","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","opacity","handleTransitionEnd","display","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transform","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","ResizableIframeCreator","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","is_iframe_event","contentId","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","embedCheckout","STORAGE_PREFIX","embedded_checkout","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","browser_storage","TimeoutError","selectorDecorator","_utility__WEBPACK_IMPORTED_MODULE_2__","memoizedMethod","lodash__WEBPACK_IMPORTED_MODULE_1__","_utility__WEBPACK_IMPORTED_MODULE_3__","cachedValue","newValue","_utility__WEBPACK_IMPORTED_MODULE_4__","_utility__WEBPACK_IMPORTED_MODULE_5__","cache","selectorMethodDecorator","joinIncludes","includes","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressActionCreator","continueAsGuest","credentials","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","toFormUrlEncoded","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","currencyCode","totalPriceStatus","totalPrice","toFixed","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","card","last4","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","customerId","fullName","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_coupon__WEBPACK_IMPORTED_MODULE_3__","orderMeta","customerCanBeCreated","mapToInteralOrderPayment","subtotal","baseAmount","sum","discountNotifications","totalDiscountedAmount","appliedGiftCertificates","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxes","taxTotal","handling","handlingCostTotal","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","text","sharingLink","channelName","channel","channelCode","PaypalScriptLoader","ErrorActionCreator","clearError","getEnvironment","process","NODE_ENV","e","ConsoleLogger","_console","log","messages","_logToConsole","info","warn","debug","NoopLogger","isEnabled","logger","console_logger","console","noop_logger","getDefaultLogger","CouponActionCreator","_couponRequestSender","applyCoupon","removeCoupon","CouponRequestSender","couponCode","checkout_params","GiftCertificateActionCreator","_giftCertificateRequestSender","applyGiftCertificate","removeGiftCertificate","GiftCertificateRequestSender","giftCertificateCode","CustomerStrategyActionCreator","_strategyRegistry","signIn","signOut","widgetInteraction","AmazonPayScriptLoader","loadWidget","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","amazon","Login","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","locale","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_toVisaCheckoutAddress","_postForm","userData","cardInformation","userEmail","to_form_url_encoded","card_information","_getCardInformation","_getAddress","phoneNumber","streetAddress","extendedAddress","locality","number","createBraintreeVisaCheckoutPaymentProcessor","braintreeScriptLoader","braintreeSDKCreator","braintree_visacheckout_payment_processor","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","JPMC","RemoteCheckoutRequestSender","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","generateToken","trackAuthorizationEvent","RemoteCheckoutActionCreator","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","CustomerActionCreator","_customerRequestSender","signInCustomer","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","NotImplementedError","AmazonPayCustomerStrategy","_remoteCheckoutActionCreator","amazonOptions","not_implemented_error","useAmazonAddressBook","_handleAuthorization","authorize","popup","scope","tokenPrefix","BraintreeVisaCheckoutCustomerStrategy","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_buttonClassName","visaCheckoutOptions","braintreevisacheckout","initOptions","storeProfile","storeLanguage","signInButton","init","on","paymentSuccessPayload","_paymentInstrumentSelected","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","_chasePayScriptLoader","chasePayOptions","chasepay","digitalSessionId","ChasePay","configure","language","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","_getGooglePayOptions","googlepaybraintree","googlepaystripe","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","CountryActionCreator","_countryRequestSender","loadCountries","CountryRequestSender","Accept-Language","OrderRequestSender","loadOrder","submitOrder","finalizeOrder","OrderActionCreator","_orderRequestSender","_checkoutValidator","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","SubmitOrderRequested","validate","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","PaymentStrategyType","OrderFinalizationNotRequiredError","payment_strategy_type","PaymentStrategyActionCreator","_orderActionCreator","execute","strategy","getByMethod","NO_PAYMENT_DATA_REQUIRED","finalize","_loadOrderPaymentsIfNeeded","order_finalization_not_required_error","CartComparator","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","CartChangedError","CheckoutValidator","comparator","cart_comparator","_compareCoupons","_compareGiftCertificates","cart_changed_error","couponsA","couponsB","giftCertificatesA","giftCertificatesB","isVaultedInstrument","PaymentActionCreator","_paymentRequestSender","submitPayment","SubmitPaymentRequested","_getPaymentRequestBody","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","_getPaymentMethod","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","map_to_internal_customer","authToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","geoCountryCode","source","paymentMethodSelector","PaymentRequestSender","_transformResponse","statusText","PaymentStrategyRegistry","_getToken","_hasFactoryForMethod","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","clientSidePaymentProviders","paymentSettings","PaymentArgumentInvalidError","invalidFields","PaymentMethodCancelledError","AffirmPaymentStrategy","_paymentActionCreator","_affirmScriptLoader","publicKey","affirm","_affirm","payment_argument_invalid_error","_getCheckoutInformation","open","onFail","failObject","reason","payment_method_cancelled_error","onSuccess","successObject","ui","paymentPayload","checkout_token","_getBillingAddress","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","order_id","shipping_amount","tax_amount","total","first","last","full","zipcode","display_name","sku","unit_price","salePrice","qty","item_image_url","item_url","_d","_e","customItems","_f","_g","listPrice","line","discount_amount","discount_display_name","DISCOUNTED_AMOUNT","affirmJs","Function","AffirmScriptLoader","apikey","scriptURI","_getScriptURI","AfterpayPaymentStrategy","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","afterpaySdk","_afterpaySdk","_displayModal","afterpay","orderPayload","countryName","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","AfterPay","isInternalAddressEqual","ignoredKeys","is_private","mapFromInternalAddress","AmazonPayPaymentStrategy","_billingAddressActionCreator","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","_getMerchantId","onPaymentSelect","onReady","walletOptions","amazonOrderReferenceId","design","designMode","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","remoteAddress","internalBillingAddress","getAmazonOrderReferenceId","Overlay","_element","_createElement","parentElement","_registerClick","remove","_unregisterClick","_removeAfterTransition","element","background","transitionDuration","zIndex","onClick","onClick_1","handeTransition","propertyName","promise","cancellable","cancel","race","BraintreePaymentProcessor","_overlay","_threeDSecureOptions","preloadPaypal","tokenizeCard","requestData","_mapToCreditCard","creditCards","focusWindow","useraction","verifyCard","addFrame","removeFrame","cancelVerifyCard","verification","cancellable_promise","appendSessionId","processedPayment","creditCard","cardholderName","ccName","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","endpoint","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","_is3dsEnabled","is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","shouldSaveInstrument","tokenizedCard","ChasePayEventType","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","isBraintreeError","BraintreeVisaCheckoutPaymentStrategy","_paymentStrategyActionCreator","visaInitOptions","CardinalEventType","CardinalInitializationType","CardinalValidatedAction","PaymentType","CardinalTriggerEvents","CardinalPaymentBrand","CardinalPaymentStep","CardinalEventAction","chasepay_payment_strategy","ChasePayPaymentStrategy","_wepayRiskClient","_walletEvent$","walletButton","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","showLoadingAnimation","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","ConvergePaymentStrategy","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","CreditCardPaymentStrategy","CyberSourcePaymentStrategy","_threeDSecurePaymentProcessor","_paymentProcessor","_processor","SignatureValidationErrors","CardBrand","DigitalWalletType","CyberSourceThreeDSecurePaymentProcessor","_cyberSourceScriptLoader","_cardinalEvent$","index_","Cardinal","_Cardinal","logging","level","SetupCompleted","setupCompletedData","_resolveSetupEvent","Validated","jwt","ActionCode","SUCCCESS","_resolveAuthorizationPromise","NOACTION","ErrorNumber","_rejectAuthorizationPromise","ERROR","FAILURE","ErrorDescription","_rejectSetupEvent","cardinal","internal_operators_","SETUP","setup","Init","BIN_PROCCESS","Status","continueObject","AcsUrl","Payload","partialOrder","OrderDetails","TransactionId","AUTHORIZATION","continue","CCA","_addThreeDSecureData","OK","CyberSourceScriptLoader","CyberSourcePaymentProcessor","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayOptions","statusCode","KlarnaPaymentStrategy","_klarnaScriptLoader","_supportedEUCountries","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","client_token","show_form","_getUpdateSessionData","_mapToKlarnaAddress","klarnaAddress","street_address","given_name","family_name","street_address2","updateSessionData","approved","KlarnaScriptLoader","Klarna","Credit","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","NoPaymentDataRequiredPaymentStrategy","OfflinePaymentStrategy","OffsitePaymentStrategy","_shouldSubmitFullPayload","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","environment","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","SagePayPaymentStrategy","UnsupportedBrowserError","SquarePaymentStrategy","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","requestShippingAddress","requestBillingInfo","storeName","pending","setPostalCode","masterpassBtn","elementId","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","payloadWithToken","credit_card_payment_strategy","PaymentMethodDeclinedError","ZipPaymentStrategy","_zipScriptLoader","zip","_zipClient","zipClient","Checkout","payment_method_declined_error","onCheckout","openModal","ZipScriptLoader","Zip","createPaymentStrategyRegistry","paymentClient","payment_strategy_registry","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","overlay","overlay_overlay","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configActionCreator","paymentStrategyActionCreator","payment_strategy_action_creator","AFFIRM","affirm_payment_strategy","affirm_script_loader","AFTERPAY","afterpay_payment_strategy","afterpay_script_loader","AMAZON","amazon_pay_payment_strategy","amazon_pay_script_loader","CYBERSOURCE","cybersource_payment_strategy","cybersource_threedsecure_payment_processor","cybersource_script_loader","cybersource_payment_processor","KLARNA","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","PAYPAL","paypal_pro_payment_strategy","PAYPAL_EXPRESS","paypal_express_payment_strategy","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","sage_pay_payment_strategy","SQUARE","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","BRAINTREE","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","BRAINTREE_VISA_CHECKOUT","braintree_visacheckout_payment_strategy","visacheckout_script_loader","CHASE_PAY","chasepay_script_loader","wepay_risk_client","BRAINTREE_GOOGLE_PAY","WE_PAY","wepay_payment_strategy","STRIPE_GOOGLE_PAY","ZIP","zip_payment_strategy","zip_script_loader","CONVERGE","converge_payment_strategy","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","newDate","valueOf","now","isFuture","vaultAccessExpiry","setMinutes","getMinutes","getVaultAccessToken","storeId","shopperCurrency","isTransactional","InstrumentResponseTransformer","transformResponse","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","bigpay_token","defaultInstrument","default_instrument","iin","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","selectOption","mergedOptions","AmazonPayShippingStrategy","_consignmentActionCreator","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","DefaultShippingStrategy","checkout_store_selector","CheckoutStoreSelector","_form","_payment","_shippingAddress","getShippingOptions","availableShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","checkout_store_error_selector","CheckoutStoreErrorSelector","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getSelectShippingOptionError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getUpdateCheckoutError","checkout_store_status_selector","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isSelectingShippingOption","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isUpdatingCheckout","createCheckoutSelectors","ErrorMessageTransformer","_messageCustomizer","input","trim","CheckoutService","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","_errorTransformer","error_message_transformer","isCheckoutServiceError","notifyState","_dispatch","loadCheckoutAction","loadConfigAction","finalizeOrderIfNeeded","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","updateBillingAddress","createCheckoutService","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","createCustomerStrategyRegistry","error_action_creator","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","createShippingStrategyRegistry","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","IframeEmbeddedCheckoutMessenger","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","noop_embedded_checkout_messenger","iframe_embedded_checkout_messenger","parentOrigin","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","precision","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","createCurrencyService","currency_service","create_checkout_button_initializer","embed_checkout","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","mapToInternalCart","promotions","notifications","map_to_internal_line_items","map_to_internal_coupon","promotion","banners","banner","placeholders","messageHtml","certificate","map_to_internal_gift_certificate","isShippingRequired","taxSubtotal"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 140);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingShippingAddress,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any; };\n    errors: Array<{ code: string, message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string, message?: string }>,\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","module.exports = require(\"@bigcommerce/script-loader\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","module.exports = require(\"local-storage-fallback\");","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import isEqual from './is-equal';\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (!isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","module.exports = require(\"iframe-resizer\");","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CacheKeyResolver } from '../utility';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    const resolver = new CacheKeyResolver();\n\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(\n        decoratedFn as TFunction,\n        (...args) => resolver.getKey(...args)\n    );\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string, message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return {\n            ...data,\n            initializedContainers: {\n                ...data.initializedContainers,\n                [action.meta.containerId]: true,\n            },\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...data,\n            initializedContainers: {},\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CountryActionType.LoadCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return action.payload ? action.payload.vaultedInstruments : [];\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...statuses, isLoading: false };\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return action.payload ? { ...data, billing: action.payload.billing } : data;\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return action.payload ? { ...data, shipping: action.payload.shipping } : data;\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return { ...data, settings: action.payload };\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean {\n        const method = this._checkoutButton.data[methodId];\n\n        if (!method) {\n            return false;\n        }\n\n        if (!containerId) {\n            return some(method.initializedContainers, isInitialized => isInitialized === true);\n        }\n\n        return method.initializedContainers[containerId] === true;\n    }\n\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): RequestError | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): RequestError | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._customerStrategies.data[methodId] &&\n            this._customerStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const grandTotal = this._checkout.getGrandTotal(useStoreCredit);\n\n        return grandTotal ? grandTotal > 0 : false;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._paymentStrategies.data[methodId] &&\n            this._paymentStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._shippingStrategies.data[methodId] &&\n            this._shippingStrategies.data[methodId].isInitialized\n        );\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getGrandTotal(useStoreCredit?: boolean): number | undefined {\n        const checkout = this.getCheckout();\n\n        if (!checkout) {\n            return;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : grandTotal;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","module.exports = require(\"rxjs/internal/operators\");","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken } from '../../../payment/strategies/paypal';\nimport { PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (data, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        onError?: (error: StandardError) => void\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { IFrameComponent } from 'iframe-resizer';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"rxjs/index\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.type = 'timeout';\n    }\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError} from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage, externalSource), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string, externalSource?: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","enum PaymentStrategyType {\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    CYBERSOURCE = 'cybersource',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._getPaymentRequestBody({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(state.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { StandardError } from '../../../common/error/errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n        if (!this._window.affirm) {\n            throw new StandardError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new StandardError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getGrandTotal(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export const SignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CyberSourceCardinal {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    setup(initializationType: CardinalInitializationType, initializationData: CardinalInitializatinDataMap[CardinalInitializationType]): void;\n    trigger(event: CardinalTriggerEvents, data?: string): Promise<CardinalBinProccessResponse | void>;\n    continue(paymentBrand: CardinalPaymentBrand, continueObject: ContinueObject, order: PartialOrder): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CyberSourceCardinal;\n}\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: SetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging?: {\n        level: string,\n    };\n    payment?: {\n        view?: string,\n        framework?: string,\n        displayLoading?: boolean,\n    };\n}>;\n\nexport interface SetupCompletedData {\n    sessionId: string;\n    modules: ModuleState[];\n}\n\nexport interface ModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializatinDataMap {\n    [CardinalInitializationType.Init]: InitTypeData;\n    [CardinalInitializationType.Complete]: CompleteTypeData;\n    [CardinalInitializationType.Confirm]: ConfirmTypeData;\n}\n\nexport interface InitTypeData {\n    jwt: string;\n}\n\nexport interface CompleteTypeData {\n    Status: string;\n}\n\nexport interface ConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport enum CardinalValidatedAction {\n    SUCCCESS = 'SUCCESS',\n    NOACTION = 'NOACTION',\n    FAILURE = 'FAILURE',\n    ERROR = 'ERROR',\n}\n\nexport interface CardinalValidatedData {\n    ActionCode: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated: boolean;\n    Payment?: Payment;\n}\n\nexport interface Payment {\n    ProcessorTransactionId: string;\n    Type: PaymentType;\n}\n\nexport enum PaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BIN_PROCCESS = 'bin.process',\n}\n\nexport interface CardinalBinProccessResponse {\n    Status: boolean;\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport interface ContinueObject {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface PartialOrder {\n    OrderDetails: Orderdetails;\n}\n\nexport interface Orderdetails {\n    OrderNumber?: string;\n    Amount?: number;\n    CurrencyCode?: string;\n    OrderChannel?: string;\n    TransactionId: string;\n}\n\nexport enum CardinalPaymentStep {\n    SETUP = 'setup',\n    AUTHORIZATION = 'authorization',\n}\n\nexport enum CardinalEventAction {\n    ERROR = 'error',\n    OK = 'ok',\n}\n\nexport interface CardinalEventResponse {\n    type: {\n        step: CardinalPaymentStep;\n        action: CardinalEventAction;\n    };\n    jwt?: string;\n    data?: CardinalValidatedData;\n    status: boolean;\n}\n\nexport interface JPMC {\n    CyberSourceCardinal: CyberSourceCardinal;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport OrderRequestBody from '../../../order/order-request-body';\nimport { CreditCardInstrument } from '../../payment';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    CyberSourcePaymentProcessor,\n    CyberSourceThreeDSecurePaymentProcessor,\n} from './index';\n\nexport default class CyberSourcePaymentStrategy implements PaymentStrategy {\n    private _processor?: CyberSourcePaymentProcessor | CyberSourceThreeDSecurePaymentProcessor;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _threeDSecurePaymentProcessor: CyberSourceThreeDSecurePaymentProcessor,\n        private _paymentProcessor: CyberSourcePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)).then( state => {\n            this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n            if (!this._paymentMethod || !this._paymentMethod.config) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            this._processor = this._paymentMethod.config.is3dsEnabled ? this._threeDSecurePaymentProcessor : this._paymentProcessor;\n\n            return this._processor.initialize(this._paymentMethod);\n        });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData as CreditCardInstrument;\n\n        if (!this._processor) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !paymentData) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._processor.execute(payment, order, paymentData, options);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._processor) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._processor.finalize(options);\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._processor) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._processor.deinitialize(options);\n    }\n}\n","import { includes, some } from 'lodash';\nimport { Subject } from 'rxjs/index';\nimport { filter } from 'rxjs/internal/operators';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError,\n    StandardError\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { CreditCardInstrument, ThreeDSecure } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentRequestOptions } from '../../payment-request-options';\n\nimport {\n    CardinalEventAction,\n    CardinalEventResponse,\n    CardinalEventType,\n    CardinalInitializationType,\n    CardinalPaymentBrand,\n    CardinalPaymentStep,\n    CardinalTriggerEvents,\n    CardinalValidatedAction,\n    CardinalValidatedData,\n    CyberSourceCardinal,\n    CyberSourceScriptLoader,\n    SetupCompletedData,\n    SignatureValidationErrors,\n} from './index';\n\nexport default class CyberSourceThreeDSecurePaymentProcessor {\n    private _Cardinal?: CyberSourceCardinal;\n    private _paymentMethod?: PaymentMethod;\n    private _cardinalEvent$: Subject<CardinalEventResponse>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _cyberSourceScriptLoader: CyberSourceScriptLoader\n    ) {\n        this._cardinalEvent$ = new Subject();\n    }\n\n    initialize(paymentMethod: PaymentMethod): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = paymentMethod;\n\n        // lengen.....dary!!!!   Brrrrp\n\n        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const clientToken = this._paymentMethod.clientToken;\n\n        return this._cyberSourceScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(Cardinal => {\n                this._Cardinal = Cardinal;\n\n                this._Cardinal.configure({\n                    logging: {\n                        level: 'on',\n                    },\n                });\n\n                this._Cardinal.on(CardinalEventType.SetupCompleted, (setupCompletedData: SetupCompletedData) => {\n                    this._resolveSetupEvent();\n                });\n\n                this._Cardinal.on(CardinalEventType.Validated, (data: CardinalValidatedData, jwt: string) => {\n                    switch (data.ActionCode) {\n                        case CardinalValidatedAction.SUCCCESS:\n                            this._resolveAuthorizationPromise(jwt);\n                            break;\n                        case CardinalValidatedAction.NOACTION:\n                            if (data.ErrorNumber > 0) {\n                                this._rejectAuthorizationPromise(data, CardinalEventAction.ERROR);\n                            } else {\n                                this._resolveAuthorizationPromise(jwt);\n                            }\n                            break;\n                        case CardinalValidatedAction.FAILURE:\n                            data.ErrorDescription = 'User failed authentication or an error was encountered while processing the transaction';\n                            this._rejectAuthorizationPromise(data, CardinalEventAction.ERROR);\n                            break;\n                        case CardinalValidatedAction.ERROR:\n                            if (includes(SignatureValidationErrors, data.ErrorNumber)) {\n                                this._rejectSetupEvent();\n                            } else {\n                                this._rejectAuthorizationPromise(data, CardinalEventAction.ERROR);\n                            }\n                    }\n                });\n\n                return ((cardinal: CyberSourceCardinal): Promise<InternalCheckoutSelectors> => {\n                    return new Promise((resolve, reject) => {\n                        this._cardinalEvent$\n                            .pipe(take(1), filter(event => event.type.step === CardinalPaymentStep.SETUP))\n                            .subscribe((event: CardinalEventResponse) => {\n                                event.status ? resolve() : reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n                            });\n\n                        cardinal.setup(CardinalInitializationType.Init, {\n                            jwt: clientToken,\n                        });\n                    });\n                })(this._Cardinal);\n            }).then(() => {\n                return this._store.getState();\n            });\n    }\n\n    execute(payment: OrderPaymentRequestBody, order: OrderRequestBody, paymentData: CreditCardInstrument, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._Cardinal) {\n            return Promise.reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n        }\n\n        return ((cardinal: CyberSourceCardinal): Promise<InternalCheckoutSelectors> => {\n            return cardinal.trigger(CardinalTriggerEvents.BIN_PROCCESS, paymentData.ccNumber).then(result => {\n                if (result && result.Status) {\n                    return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n                        .then(() =>\n                            this._store.dispatch(\n                                this._paymentActionCreator.submitPayment({ ...payment, paymentData })\n                            )\n                        ).catch(error => {\n                            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'enrolled_card' })) {\n                                return Promise.reject(error);\n                            }\n\n                            const continueObject = {\n                                AcsUrl: error.body.three_ds_result.acs_url,\n                                Payload: error.body.three_ds_result.merchant_data,\n                            };\n\n                            const partialOrder = {\n                                OrderDetails: {\n                                    TransactionId: error.body.three_ds_result.payer_auth_request,\n                                },\n                            };\n\n                            return new Promise<string>((resolve, reject) => {\n                                this._cardinalEvent$\n                                    .pipe(take(1), filter(event => event.type.step === CardinalPaymentStep.AUTHORIZATION))\n                                    .subscribe((event: CardinalEventResponse) => {\n                                        if (!event.status) {\n                                            const message = event.data ? event.data.ErrorDescription : '';\n                                            reject(new StandardError(message));\n                                        }\n                                        resolve(event.jwt);\n                                    });\n\n                                cardinal.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n                            }).then(jwt =>\n                                this._store.dispatch(\n                                    this._paymentActionCreator.submitPayment({\n                                        ...payment,\n                                        paymentData: this._addThreeDSecureData(paymentData, { token: jwt }),\n                                    })\n                                )\n                            );\n                        });\n                } else {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n        })(this._Cardinal);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new OrderFinalizationNotRequiredError();\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _resolveAuthorizationPromise(jwt: string): void {\n        this._cardinalEvent$.next({\n            type: {\n                step: CardinalPaymentStep.AUTHORIZATION,\n                action: CardinalEventAction.OK,\n            },\n            jwt,\n            status: true,\n        });\n    }\n\n    private _resolveSetupEvent(): void {\n        this._cardinalEvent$.next({\n            type: {\n                step: CardinalPaymentStep.SETUP,\n                action: CardinalEventAction.OK,\n            },\n            status: true,\n        });\n    }\n\n    private _rejectSetupEvent(): void {\n        this._cardinalEvent$.next({\n            type: {\n                step: CardinalPaymentStep.SETUP,\n                action: CardinalEventAction.ERROR,\n            },\n            status: false,\n        });\n    }\n\n    private _rejectAuthorizationPromise(data: CardinalValidatedData, action: CardinalEventAction): void {\n        this._cardinalEvent$.next({\n            type: {\n                step: CardinalPaymentStep.AUTHORIZATION,\n                action,\n            },\n            data,\n            status: false,\n        });\n    }\n\n    private _addThreeDSecureData(payment: CreditCardInstrument, threeDSecure: ThreeDSecure): CreditCardInstrument {\n        payment.threeDSecure = threeDSecure;\n\n        return payment;\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { CardinalWindow, CyberSourceCardinal } from './cybersource';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CyberSourceScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: CardinalWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<CyberSourceCardinal> {\n        return this._scriptLoader\n            .loadScript(testMode ? SDK_TEST_URL : SDK_PROD_URL)\n            .then(() => {\n                if (!this._window.Cardinal) {\n                    throw new StandardError();\n                }\n\n                return this._window.Cardinal;\n            });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    OrderActionCreator,\n    OrderPaymentRequestBody,\n    OrderRequestBody\n} from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\n\nimport { CreditCardInstrument } from '../../payment';\nimport PaymentMethod from '../../payment-method';\n\nexport default class CyberSourcePaymentProcessor {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    initialize(paymentMethod: PaymentMethod): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payment: OrderPaymentRequestBody, order: OrderRequestBody, paymentData: CreditCardInstrument, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport BillingAddress from '../../../billing/billing-address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n    private _supportedEUCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes(this._supportedEUCountries, billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The selected payment method was declined. Please select another payment method.');\n\n        this.type = 'payment_declined';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError, PaymentMethodDeclinedError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _zipScriptLoader: ZipScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._zipScriptLoader.load()\n            .then(zip => {\n                this._zipClient = zip;\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n        const useStoreCredit = !!payload.useStoreCredit;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(payment.methodId, { useStoreCredit })\n            ))\n            .then(()  => {\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options))\n                    .then(state => {\n                        this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n                        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                        }\n                    })\n                    .then(() => new Promise<string>((resolve, reject) => {\n                        zipClient.Checkout.init({\n                            onComplete: ({ checkoutId, state }) => {\n                                if (state === ZipModalEvent.CancelCheckout) {\n                                    return reject(new PaymentMethodCancelledError());\n                                }\n\n                                if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                                    return resolve(checkoutId);\n                                }\n\n                                if (state === ZipModalEvent.CheckoutDeclined) {\n                                    return reject(new PaymentMethodDeclinedError('Unfortunately your application was declined. Please select another payment method.'));\n                                }\n\n                                reject(new PaymentMethodInvalidError());\n                            },\n                            onCheckout: openModal => {\n                                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                openModal(JSON.parse(this._paymentMethod.clientToken));\n                            },\n                        });\n                    })\n                    .then(nonce =>\n                        this._store.dispatch(this._paymentActionCreator.submitPayment({\n                            methodId: payment.methodId,\n                            paymentData: { nonce },\n                        }))\n                    ));\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Zip, ZipHostWindow } from '../zip/zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new StandardError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport {\n    CyberSourcePaymentProcessor,\n    CyberSourcePaymentStrategy,\n    CyberSourceScriptLoader,\n    CyberSourceThreeDSecurePaymentProcessor,\n} from './strategies/cybersource';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator);\n    const paymentActionCreator = new PaymentActionCreator(new PaymentRequestSender(paymentClient), orderActionCreator);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n    const formPoster = createFormPoster();\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.CYBERSOURCE, () =>\n        new CyberSourcePaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            new CyberSourceThreeDSecurePaymentProcessor(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                new CyberSourceScriptLoader(scriptLoader)\n            ),\n            new CyberSourcePaymentProcessor(\n                store,\n                orderActionCreator,\n                paymentActionCreator\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ZipScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional ? config.shopperCurrency : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\n\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddress, BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: {\n                new(options: GooglePayPaymentOptions): GooglePayClient;\n            },\n        },\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        }\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string,\n        nonce: string,\n        cardInformation: {\n            type: string,\n            number: string,\n        },\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        },\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request/';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            }),\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n"],"sourceRoot":""}